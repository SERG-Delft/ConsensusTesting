// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ripple.proto

package protocol;

public interface TMPeerShardInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol.TMPeerShardInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * rangeSet of shard indexes
   * </pre>
   *
   * <code>required string shardIndexes = 1;</code>
   * @return Whether the shardIndexes field is set.
   */
  boolean hasShardIndexes();
  /**
   * <pre>
   * rangeSet of shard indexes
   * </pre>
   *
   * <code>required string shardIndexes = 1;</code>
   * @return The shardIndexes.
   */
  java.lang.String getShardIndexes();
  /**
   * <pre>
   * rangeSet of shard indexes
   * </pre>
   *
   * <code>required string shardIndexes = 1;</code>
   * @return The bytes for shardIndexes.
   */
  com.google.protobuf.ByteString
      getShardIndexesBytes();

  /**
   * <pre>
   * node public key
   * </pre>
   *
   * <code>optional bytes nodePubKey = 2;</code>
   * @return Whether the nodePubKey field is set.
   */
  boolean hasNodePubKey();
  /**
   * <pre>
   * node public key
   * </pre>
   *
   * <code>optional bytes nodePubKey = 2;</code>
   * @return The nodePubKey.
   */
  com.google.protobuf.ByteString getNodePubKey();

  /**
   * <pre>
   * ipv6 or ipv4 address
   * </pre>
   *
   * <code>optional string endpoint = 3;</code>
   * @return Whether the endpoint field is set.
   */
  boolean hasEndpoint();
  /**
   * <pre>
   * ipv6 or ipv4 address
   * </pre>
   *
   * <code>optional string endpoint = 3;</code>
   * @return The endpoint.
   */
  java.lang.String getEndpoint();
  /**
   * <pre>
   * ipv6 or ipv4 address
   * </pre>
   *
   * <code>optional string endpoint = 3;</code>
   * @return The bytes for endpoint.
   */
  com.google.protobuf.ByteString
      getEndpointBytes();

  /**
   * <pre>
   * true if last link in the peer chain
   * </pre>
   *
   * <code>optional bool lastLink = 4;</code>
   * @return Whether the lastLink field is set.
   */
  boolean hasLastLink();
  /**
   * <pre>
   * true if last link in the peer chain
   * </pre>
   *
   * <code>optional bool lastLink = 4;</code>
   * @return The lastLink.
   */
  boolean getLastLink();

  /**
   * <pre>
   * public keys used to route messages
   * </pre>
   *
   * <code>repeated .protocol.TMLink peerChain = 5;</code>
   */
  java.util.List<protocol.TMLink> 
      getPeerChainList();
  /**
   * <pre>
   * public keys used to route messages
   * </pre>
   *
   * <code>repeated .protocol.TMLink peerChain = 5;</code>
   */
  protocol.TMLink getPeerChain(int index);
  /**
   * <pre>
   * public keys used to route messages
   * </pre>
   *
   * <code>repeated .protocol.TMLink peerChain = 5;</code>
   */
  int getPeerChainCount();
  /**
   * <pre>
   * public keys used to route messages
   * </pre>
   *
   * <code>repeated .protocol.TMLink peerChain = 5;</code>
   */
  java.util.List<? extends protocol.TMLinkOrBuilder> 
      getPeerChainOrBuilderList();
  /**
   * <pre>
   * public keys used to route messages
   * </pre>
   *
   * <code>repeated .protocol.TMLink peerChain = 5;</code>
   */
  protocol.TMLinkOrBuilder getPeerChainOrBuilder(
      int index);
}
