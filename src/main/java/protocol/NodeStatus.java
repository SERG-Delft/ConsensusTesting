// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ripple.proto

package protocol;

/**
 * Protobuf enum {@code protocol.NodeStatus}
 */
public enum NodeStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * acquiring connections
   * </pre>
   *
   * <code>nsCONNECTING = 1;</code>
   */
  nsCONNECTING(1),
  /**
   * <pre>
   * convinced we are connected to the real network
   * </pre>
   *
   * <code>nsCONNECTED = 2;</code>
   */
  nsCONNECTED(2),
  /**
   * <pre>
   * we know what the previous ledger is
   * </pre>
   *
   * <code>nsMONITORING = 3;</code>
   */
  nsMONITORING(3),
  /**
   * <pre>
   * we have the full ledger contents
   * </pre>
   *
   * <code>nsVALIDATING = 4;</code>
   */
  nsVALIDATING(4),
  /**
   * <pre>
   * node is shutting down
   * </pre>
   *
   * <code>nsSHUTTING = 5;</code>
   */
  nsSHUTTING(5),
  ;

  /**
   * <pre>
   * acquiring connections
   * </pre>
   *
   * <code>nsCONNECTING = 1;</code>
   */
  public static final int nsCONNECTING_VALUE = 1;
  /**
   * <pre>
   * convinced we are connected to the real network
   * </pre>
   *
   * <code>nsCONNECTED = 2;</code>
   */
  public static final int nsCONNECTED_VALUE = 2;
  /**
   * <pre>
   * we know what the previous ledger is
   * </pre>
   *
   * <code>nsMONITORING = 3;</code>
   */
  public static final int nsMONITORING_VALUE = 3;
  /**
   * <pre>
   * we have the full ledger contents
   * </pre>
   *
   * <code>nsVALIDATING = 4;</code>
   */
  public static final int nsVALIDATING_VALUE = 4;
  /**
   * <pre>
   * node is shutting down
   * </pre>
   *
   * <code>nsSHUTTING = 5;</code>
   */
  public static final int nsSHUTTING_VALUE = 5;


  public final int getNumber() {
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static NodeStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static NodeStatus forNumber(int value) {
    switch (value) {
      case 1: return nsCONNECTING;
      case 2: return nsCONNECTED;
      case 3: return nsMONITORING;
      case 4: return nsVALIDATING;
      case 5: return nsSHUTTING;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<NodeStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      NodeStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<NodeStatus>() {
          public NodeStatus findValueByNumber(int number) {
            return NodeStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.Ripple.getDescriptor().getEnumTypes().get(2);
  }

  private static final NodeStatus[] VALUES = values();

  public static NodeStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private NodeStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.NodeStatus)
}

