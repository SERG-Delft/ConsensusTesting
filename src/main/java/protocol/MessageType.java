// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ripple.proto

package protocol;

/**
 * <pre>
 * Unused numbers in the list below may have been used previously. Please don't
 * reassign them for reuse unless you are 100% certain that there won't be a
 * conflict. Even if you're sure, it's probably best to assign a new type.
 * </pre>
 *
 * Protobuf enum {@code protocol.MessageType}
 */
public enum MessageType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>mtMANIFESTS = 2;</code>
   */
  mtMANIFESTS(2),
  /**
   * <code>mtPING = 3;</code>
   */
  mtPING(3),
  /**
   * <code>mtCLUSTER = 5;</code>
   */
  mtCLUSTER(5),
  /**
   * <code>mtENDPOINTS = 15;</code>
   */
  mtENDPOINTS(15),
  /**
   * <code>mtTRANSACTION = 30;</code>
   */
  mtTRANSACTION(30),
  /**
   * <code>mtGET_LEDGER = 31;</code>
   */
  mtGET_LEDGER(31),
  /**
   * <code>mtLEDGER_DATA = 32;</code>
   */
  mtLEDGER_DATA(32),
  /**
   * <code>mtPROPOSE_LEDGER = 33;</code>
   */
  mtPROPOSE_LEDGER(33),
  /**
   * <code>mtSTATUS_CHANGE = 34;</code>
   */
  mtSTATUS_CHANGE(34),
  /**
   * <code>mtHAVE_SET = 35;</code>
   */
  mtHAVE_SET(35),
  /**
   * <code>mtVALIDATION = 41;</code>
   */
  mtVALIDATION(41),
  /**
   * <code>mtGET_OBJECTS = 42;</code>
   */
  mtGET_OBJECTS(42),
  /**
   * <code>mtGET_SHARD_INFO = 50;</code>
   */
  mtGET_SHARD_INFO(50),
  /**
   * <code>mtSHARD_INFO = 51;</code>
   */
  mtSHARD_INFO(51),
  /**
   * <code>mtGET_PEER_SHARD_INFO = 52;</code>
   */
  mtGET_PEER_SHARD_INFO(52),
  /**
   * <code>mtPEER_SHARD_INFO = 53;</code>
   */
  mtPEER_SHARD_INFO(53),
  /**
   * <code>mtVALIDATORLIST = 54;</code>
   */
  mtVALIDATORLIST(54),
  /**
   * <code>mtSQUELCH = 55;</code>
   */
  mtSQUELCH(55),
  /**
   * <code>mtVALIDATORLISTCOLLECTION = 56;</code>
   */
  mtVALIDATORLISTCOLLECTION(56),
  /**
   * <code>mtPROOF_PATH_REQ = 57;</code>
   */
  mtPROOF_PATH_REQ(57),
  /**
   * <code>mtPROOF_PATH_RESPONSE = 58;</code>
   */
  mtPROOF_PATH_RESPONSE(58),
  /**
   * <code>mtREPLAY_DELTA_REQ = 59;</code>
   */
  mtREPLAY_DELTA_REQ(59),
  /**
   * <code>mtREPLAY_DELTA_RESPONSE = 60;</code>
   */
  mtREPLAY_DELTA_RESPONSE(60),
  ;

  /**
   * <code>mtMANIFESTS = 2;</code>
   */
  public static final int mtMANIFESTS_VALUE = 2;
  /**
   * <code>mtPING = 3;</code>
   */
  public static final int mtPING_VALUE = 3;
  /**
   * <code>mtCLUSTER = 5;</code>
   */
  public static final int mtCLUSTER_VALUE = 5;
  /**
   * <code>mtENDPOINTS = 15;</code>
   */
  public static final int mtENDPOINTS_VALUE = 15;
  /**
   * <code>mtTRANSACTION = 30;</code>
   */
  public static final int mtTRANSACTION_VALUE = 30;
  /**
   * <code>mtGET_LEDGER = 31;</code>
   */
  public static final int mtGET_LEDGER_VALUE = 31;
  /**
   * <code>mtLEDGER_DATA = 32;</code>
   */
  public static final int mtLEDGER_DATA_VALUE = 32;
  /**
   * <code>mtPROPOSE_LEDGER = 33;</code>
   */
  public static final int mtPROPOSE_LEDGER_VALUE = 33;
  /**
   * <code>mtSTATUS_CHANGE = 34;</code>
   */
  public static final int mtSTATUS_CHANGE_VALUE = 34;
  /**
   * <code>mtHAVE_SET = 35;</code>
   */
  public static final int mtHAVE_SET_VALUE = 35;
  /**
   * <code>mtVALIDATION = 41;</code>
   */
  public static final int mtVALIDATION_VALUE = 41;
  /**
   * <code>mtGET_OBJECTS = 42;</code>
   */
  public static final int mtGET_OBJECTS_VALUE = 42;
  /**
   * <code>mtGET_SHARD_INFO = 50;</code>
   */
  public static final int mtGET_SHARD_INFO_VALUE = 50;
  /**
   * <code>mtSHARD_INFO = 51;</code>
   */
  public static final int mtSHARD_INFO_VALUE = 51;
  /**
   * <code>mtGET_PEER_SHARD_INFO = 52;</code>
   */
  public static final int mtGET_PEER_SHARD_INFO_VALUE = 52;
  /**
   * <code>mtPEER_SHARD_INFO = 53;</code>
   */
  public static final int mtPEER_SHARD_INFO_VALUE = 53;
  /**
   * <code>mtVALIDATORLIST = 54;</code>
   */
  public static final int mtVALIDATORLIST_VALUE = 54;
  /**
   * <code>mtSQUELCH = 55;</code>
   */
  public static final int mtSQUELCH_VALUE = 55;
  /**
   * <code>mtVALIDATORLISTCOLLECTION = 56;</code>
   */
  public static final int mtVALIDATORLISTCOLLECTION_VALUE = 56;
  /**
   * <code>mtPROOF_PATH_REQ = 57;</code>
   */
  public static final int mtPROOF_PATH_REQ_VALUE = 57;
  /**
   * <code>mtPROOF_PATH_RESPONSE = 58;</code>
   */
  public static final int mtPROOF_PATH_RESPONSE_VALUE = 58;
  /**
   * <code>mtREPLAY_DELTA_REQ = 59;</code>
   */
  public static final int mtREPLAY_DELTA_REQ_VALUE = 59;
  /**
   * <code>mtREPLAY_DELTA_RESPONSE = 60;</code>
   */
  public static final int mtREPLAY_DELTA_RESPONSE_VALUE = 60;


  public final int getNumber() {
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static MessageType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static MessageType forNumber(int value) {
    switch (value) {
      case 2: return mtMANIFESTS;
      case 3: return mtPING;
      case 5: return mtCLUSTER;
      case 15: return mtENDPOINTS;
      case 30: return mtTRANSACTION;
      case 31: return mtGET_LEDGER;
      case 32: return mtLEDGER_DATA;
      case 33: return mtPROPOSE_LEDGER;
      case 34: return mtSTATUS_CHANGE;
      case 35: return mtHAVE_SET;
      case 41: return mtVALIDATION;
      case 42: return mtGET_OBJECTS;
      case 50: return mtGET_SHARD_INFO;
      case 51: return mtSHARD_INFO;
      case 52: return mtGET_PEER_SHARD_INFO;
      case 53: return mtPEER_SHARD_INFO;
      case 54: return mtVALIDATORLIST;
      case 55: return mtSQUELCH;
      case 56: return mtVALIDATORLISTCOLLECTION;
      case 57: return mtPROOF_PATH_REQ;
      case 58: return mtPROOF_PATH_RESPONSE;
      case 59: return mtREPLAY_DELTA_REQ;
      case 60: return mtREPLAY_DELTA_RESPONSE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      MessageType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
          public MessageType findValueByNumber(int number) {
            return MessageType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.Ripple.getDescriptor().getEnumTypes().get(0);
  }

  private static final MessageType[] VALUES = values();

  public static MessageType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private MessageType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.MessageType)
}

