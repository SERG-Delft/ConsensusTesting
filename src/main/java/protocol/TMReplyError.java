// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ripple.proto

package protocol;

/**
 * Protobuf enum {@code protocol.TMReplyError}
 */
public enum TMReplyError
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * We don't have the ledger you are asking about
   * </pre>
   *
   * <code>reNO_LEDGER = 1;</code>
   */
  reNO_LEDGER(1),
  /**
   * <pre>
   * We don't have any of the nodes you are asking for
   * </pre>
   *
   * <code>reNO_NODE = 2;</code>
   */
  reNO_NODE(2),
  /**
   * <pre>
   * The request is wrong, e.g. wrong format
   * </pre>
   *
   * <code>reBAD_REQUEST = 3;</code>
   */
  reBAD_REQUEST(3),
  ;

  /**
   * <pre>
   * We don't have the ledger you are asking about
   * </pre>
   *
   * <code>reNO_LEDGER = 1;</code>
   */
  public static final int reNO_LEDGER_VALUE = 1;
  /**
   * <pre>
   * We don't have any of the nodes you are asking for
   * </pre>
   *
   * <code>reNO_NODE = 2;</code>
   */
  public static final int reNO_NODE_VALUE = 2;
  /**
   * <pre>
   * The request is wrong, e.g. wrong format
   * </pre>
   *
   * <code>reBAD_REQUEST = 3;</code>
   */
  public static final int reBAD_REQUEST_VALUE = 3;


  public final int getNumber() {
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TMReplyError valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TMReplyError forNumber(int value) {
    switch (value) {
      case 1: return reNO_LEDGER;
      case 2: return reNO_NODE;
      case 3: return reBAD_REQUEST;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TMReplyError>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TMReplyError> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TMReplyError>() {
          public TMReplyError findValueByNumber(int number) {
            return TMReplyError.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.Ripple.getDescriptor().getEnumTypes().get(8);
  }

  private static final TMReplyError[] VALUES = values();

  public static TMReplyError valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TMReplyError(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.TMReplyError)
}

